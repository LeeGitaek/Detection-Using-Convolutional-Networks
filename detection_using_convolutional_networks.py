# -*- coding: utf-8 -*-
"""Detection-Using-Convolutional-Networks.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19XVdB40K8yEATmThtyBtyLaKz5amQY14

Import library using pytorch and extra
"""

import torch
import torchvision.datasets as datasets
import torchvision.transforms as transforms
import pandas as pd
import numpy as np
import torch.nn.functional as F
import torch.nn as nn

device = 'cuda' if torch.cuda.is_available() else 'cpu'
torch.manual_seed(777)
if device == 'cuda':
    torch.cuda.manual_seed(777)

"""Model Parameters"""

# Model Parameters 

learning_rate = 0.05
training_epochs = 30 
#[30,40,50,60,70,80]
batch_size = 100
drop_prob = 0.5

"""This is class code of Detection-Using-Convolutional-Networks Model Structure"""

class Detection_Convolutional_Network(torch.nn.Module):
    def __init__(self):
      super(Detection_Convolutional_Network,self).__init__()

    
      self.layer1 = torch.nn.Sequential(
        # output size of layer 1 = (N-F)/Stride + 1 = (96 - 11) / 4 + 1 = 23.22
        torch.nn.Conv2d(1,96,kernel_size=11,stride=4,padding=0),
        torch.nn.ReLU(),
        torch.nn.MaxPool2d(kernel_size=2,stride=2)
      )

      #self.fc_layer6 = torch.nn.Linear(0,0,bias=True)
      #torch.nn.init.kaiming_uniform(self.fc.weight)
    def forward(self , x):
        out = self.layer1(x)
        return out